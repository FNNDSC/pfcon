# run pfcon unit tests (nosetests) and CUBE integration tests.
# If all tests pass, build a multi-arch image and push to DockerHub.

name: CI

on:
  push:
    branches: [ master ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches: [ master ]

jobs:
  test-pfcon:
    name: tests (pfcon)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Start Docker Swarm
        run: docker swarm init --advertise-addr 127.0.0.1
      - name: Build and run tests
        run: ./make.sh -i
      - name: Tear down
        run: |
          ./unmake.sh
          sudo rm -fr ./CHRIS_REMOTE_FS
          docker swarm leave --force
  test-cube:
    name: tests (CUBE)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t localhost/fnndsc/pfcon .
      - uses: FNNDSC/cube-integration-action@master
        env:
          PFCON_IMAGE: localhost/fnndsc/pfcon

  build:
    needs: [test-pfcon, test-cube]
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - name: Install pixi
      id: install-pixi
      if: startsWith(github.ref, 'refs/tags/v')
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.28.2
    - name: Set version
      id: set-version
      if: steps.install-pixi.outcome == 'success'
      run:
        ref_name='${{ github.ref_name }}'
        version_number="${ref_name:1}"
        pixi project version set "$version_number"
        echo "LABEL org.opencontainers.image.version=\"$version_number\"" >> Dockerfile
        echo "version=$version_number" >> "$GITHUB_OUTPUT"
    - name: Get build tags
      id: info
      shell: python
      run: |
        import os
        import itertools

        commit_sha = '${{ github.sha }}'
        short_sha = commit_sha[:7]
        git_refs = []
        version_number = '${{ steps.set-version.outputs.version }}'
        if version_number:
            sanitized_version_number = version_number.replace('+', '.')
            git_refs.append(sanitized_version_number)
        registries = ['docker.io', 'ghcr.io']
        repo = '${{ github.repository }}'.lower()
        tags = ['latest'] + git_refs
        names = ','.join(''.join(c) for c in itertools.product(
            (r + '/' for r in registries),
            [repo],
            (':' + t for t in tags)
        ))
        with open(os.environ['GITHUB_OUTPUT'], 'a') as out:
            out.write(f'tags={names}\n')
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - name: Login to DockerHub
      id: login-dockerhub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Login to GitHub Container Registry
      id: login-ghcr
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        build-args: ENVIRONMENT=prod
        push: ${{ steps.login-dockerhub.outcome == 'success' && steps.login-ghcr.outcome == 'success' }}
        context: .
        file: ./Dockerfile
        tags: "${{ steps.info.outputs.tags }}"
        platforms: linux/amd64,linux/ppc64le,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
